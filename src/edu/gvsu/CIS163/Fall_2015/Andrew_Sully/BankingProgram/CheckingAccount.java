package edu.gvsu.CIS163.Fall_2015.Andrew_Sully.BankingProgram;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import java.io.Serializable;
import java.util.GregorianCalendar;
import java.util.HashMap;

/***********************************************************************
 * An account that has a monthly fee
 **********************************************************************/
public class CheckingAccount extends Account implements Serializable {
    /*******************************************************************
     * A unique identifier for this class
     ******************************************************************/
	private static final long serialVersionUID = 920560622L;

    public static final String[] uniqueHeaders = {"Monthly Fee"};

    /*******************************************************************
     * Identifies the class for the toString() method
     ******************************************************************/
    private static final String classIdentifier = "CheckingAccount";

    /*******************************************************************
     * The number of items represented in the output of toString()
     ******************************************************************/
    private static final int numberOfItemsInToString = 6;

    /*******************************************************************
     * The fee to be deducted from this account every month
     ******************************************************************/
	private double monthlyFee;

    public CheckingAccount() {
        this("","", new GregorianCalendar(), 0);
    }

    public CheckingAccount(String number){
        this(number, "", new GregorianCalendar(), 0);
    }

    public CheckingAccount(String number, String name){
        this(number, name, new GregorianCalendar(), 0);
    }

    public CheckingAccount(String number, String ownerName,
                          double balance){
        this(number, ownerName, new GregorianCalendar(), balance);
    }

    public CheckingAccount(String number, String ownerName,
                          double balance, double monthlyFee){
        this(number, ownerName, new GregorianCalendar(),
                balance, monthlyFee);
    }

    public CheckingAccount(String number, String ownerName,
                          GregorianCalendar dateOpened){
        this(number, ownerName, dateOpened, 0);
    }

    public CheckingAccount(String number, String ownerName,
                          GregorianCalendar dateOpened, double balance){
        this(number, ownerName, dateOpened, balance, 0);
    }

    public CheckingAccount(String number, String ownerName,
                          GregorianCalendar dateOpened, double balance,
                          double monthlyFee){
        super(number, ownerName, dateOpened, balance);

        setMonthlyFee(monthlyFee);
    }


    /*******************************************************************
     * Set account instance variables based on a dataString
     * @param dataString A string in the format generated by toString()
     * @throws IllegalArgumentException if string is formatted wrongly
     ******************************************************************/
    @Override
    public void parseFromString(String dataString){
        String[] parsedStrings = dataString.split(toStringSeparator);
        if (parsedStrings.length != numberOfItemsInToString)
            throw new IllegalArgumentException();

        if(!parsedStrings[0].equals(classIdentifier))
            throw new IllegalArgumentException();

        try  {
            //Try to parse out the strings into the various variables
            setNumber(parsedStrings[1]);
            setOwnerName(parsedStrings[2]);
            setDateOpenedInMillis(Long.parseLong(parsedStrings[3]));
            setBalance(Double.parseDouble(parsedStrings[4]));
            setMonthlyFee(Double.parseDouble(parsedStrings[5]));
        } catch (NumberFormatException | NullPointerException e){
            //If the numbers weren't right, it's an argument problem
            throw new IllegalArgumentException();
        }
    }

    /*******************************************************************
     * Get the monthly fee for this account
     * @return The monthly fee
     ******************************************************************/
    public double getMonthlyFee() {
        return monthlyFee;
    }

    /*******************************************************************
     * Set the monthly fee for this account
     * @param monthlyFee The new monthly fee
     ******************************************************************/
    public void setMonthlyFee(double monthlyFee) {
        this.monthlyFee = monthlyFee;
    }

    /*******************************************************************
     * Returns a unique identifying name for the account class
     * @return A human readable unique class name
     ******************************************************************/
    public String getClassIdentifier(){
        return classIdentifier;
    }

    /*******************************************************************
     * Creates an array of the names of the data stored in the account.
     * Adds unique fields from this class to the abstract fields
     * @return The array of data headers
     ******************************************************************/
    public String[] getDataHeaders() {
        int size = Account.defaultDataHeaders.length +
                    uniqueHeaders.length;

        //Join the two arrays:
        // uniqueHeaders and Account.defaultDataHeaders
        String[] array = new String[size];
        for (int i = 0; i < size; i++){
            if (i < Account.defaultDataHeaders.length){
                array[i] = Account.defaultDataHeaders[i];
            } else {
                array[i] = uniqueHeaders[i - Account.defaultDataHeaders.length];
            }
        }
        return array;
    }

    /*******************************************************************
     * Generates a HashMap with the data headers as keys
     * @return The generated hashmap
     ******************************************************************/
    public HashMap<String, String> getClassDataAndHeaders(){
        HashMap<String, String> map = super.getBaseHashMap();
        map.put(uniqueHeaders[0], Double.toString(getMonthlyFee()));
        return map;
    }

    /*******************************************************************
     * Generates a string representation of this account
     * @return A string in the format:
     *          "ID:NUMBER;NAME;DATE_OPENED;BALANCE;MONTHLY_FEE"
     ******************************************************************/
    @Override
    public String toString(){
        //Hidden toString calls for dateOpened, balance, and monthlyFee
        //toStringSeparator = ";"
        return  classIdentifier + toStringSeparator
                + getNumber() + toStringSeparator
                + getOwnerName() + toStringSeparator
                + getDateOpenedInMillis() + toStringSeparator
                + getBalance() + toStringSeparator
                + getMonthlyFee();
    }

    /*******************************************************************
     * Generates a DOM element that represents this account
     * @return A DOM element that represents the account
     ******************************************************************/
    @Override
    public Element getDOMNode(Document dom){
        Element root = dom.createElement(classIdentifier);

        Element accNumber = dom.createElement("AccountNumber");
        accNumber.appendChild(dom.createTextNode(getNumber()));
        root.appendChild(accNumber);

        Element ownName = dom.createElement("OwnerName");
        ownName.appendChild(dom.createTextNode(getOwnerName()));
        root.appendChild(ownName);

        Element date = dom.createElement("DateOpened");
        date.appendChild(dom.createTextNode(Long.toString(
                        getDateOpenedInMillis()))
        );
        root.appendChild(date);

        Element balance = dom.createElement("Balance");
        balance.appendChild(dom.createTextNode(Double.toString(
                getBalance()
        )));
        root.appendChild(balance);

        Element monthlyFee = dom.createElement("MonthlyFee");
        monthlyFee.appendChild(dom.createTextNode(Double.toString(
                getMonthlyFee()
        )));
        root.appendChild(monthlyFee);

        return root;
    }

    /*******************************************************************
     * Parses an account from a DOM element and sets instance variables
     * @param root The element to parse from
     ******************************************************************/
    @Override
    public void parseFromDOMElement(Element root) {
        NodeList accNums = root.getElementsByTagName("AccountNumber");
        if (accNums.item(0).getFirstChild() != null) {
            setNumber(accNums.item(0)
                    .getFirstChild().getTextContent());
        } else {
            setNumber("");
        }

        NodeList ownNames = root.getElementsByTagName("OwnerName");
        if (ownNames.item(0).getFirstChild() != null){
            setOwnerName(ownNames.item(0)
                    .getFirstChild().getTextContent());
        } else {
            setOwnerName("");
        }


        NodeList dateOpeneds = root.getElementsByTagName("DateOpened");
        setDateOpenedInMillis(Long.parseLong(
                   dateOpeneds.item(0).getFirstChild().getTextContent())
        );

        NodeList bals = root.getElementsByTagName("Balance");
        setBalance(Double.parseDouble(
                        bals.item(0).getFirstChild().getTextContent())
        );

        NodeList monthFee = root.getElementsByTagName("MonthlyFee");
        setMonthlyFee(Double.parseDouble(
                      monthFee.item(0).getFirstChild().getTextContent())
        );

    }
}