package edu.gvsu.CIS163.Fall_2015.Andrew_Sully.BankingProgram;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.Serializable;
import java.util.Comparator;
import java.util.GregorianCalendar;
import java.util.HashMap;

/***********************************************************************
 * An account that has a minimum balance and an interest rate
 **********************************************************************/
public class SavingsAccount extends Account implements Serializable {
    /**
     * A unique identifier for this class
     */
	private static final long serialVersionUID = 996106642L;

    /**
     * The headers that are unique to this implementation of Account
     */
    public static final HeaderName[] uniqueHeaders = {
            new HeaderName(SavingsAccount.class, "Minimum Balance"),
            new HeaderName(SavingsAccount.class, "Interest Rate"),
    };

    /**
     * Identifies the class for the toString() method
     */
    public static final String classIdentifier = "SavingsAccount";

    /**
     * The number of items represented in the output of toString()
     */
    private static final int numberOfItemsInToString = 7;

    /**
     * The minimum balance the account must have
     */
	private double minBalance;

    /**
     * The interest rate for this account
     */
	private double interestRate;

    public SavingsAccount() {
        this("","", new GregorianCalendar(), 0);
    }

    public SavingsAccount(String number){
        this(number, "", new GregorianCalendar(), 0);
    }

    public SavingsAccount(String number, String name){
        this(number, name, new GregorianCalendar(), 0);
    }

    public SavingsAccount(String number, String ownerName,
                          double balance){
        this(number, ownerName, new GregorianCalendar(), balance);
    }

    public SavingsAccount(String number, String ownerName,
                          double balance, double minBalance){
        this(number, ownerName, new GregorianCalendar(),
                balance, minBalance);
    }

    public SavingsAccount(String number, String ownerName,
                          double balance, double minBalance,
                          double interestRate){
        this(number, ownerName, new GregorianCalendar(), balance,
                minBalance, interestRate);
    }

    public SavingsAccount(String number, String ownerName,
                   GregorianCalendar dateOpened){
        this(number, ownerName, dateOpened, 0);
    }

    public SavingsAccount(String number, String ownerName,
                   GregorianCalendar dateOpened, double balance){
        this(number, ownerName, dateOpened, balance, 0);
    }

    public SavingsAccount(String number, String ownerName,
                   GregorianCalendar dateOpened, double balance,
                   double minBalance){
        this(number, ownerName, dateOpened, balance, minBalance, 0);
    }

    public SavingsAccount(String number, String ownerName,
                   GregorianCalendar dateOpened, double balance,
                   double minBalance, double interestRate){
        super(number, ownerName, dateOpened, balance);

        setMinBalance(minBalance);
        setInterestRate(interestRate);
    }

    /*******************************************************************
     * Set account instance variables based on a dataString
     * @param dataString A string in the format generated by toString()
     * @throws IllegalArgumentException if string is formatted wrongly
     ******************************************************************/
    @Override
    public void parseFromString(String dataString){
        String[] parsedStrings = dataString.split(toStringSeparator);
        if (parsedStrings.length != numberOfItemsInToString)
            throw new IllegalArgumentException();

        if(!parsedStrings[0].equals(classIdentifier))
            throw new IllegalArgumentException();

        try  {
            //Try to parse out the strings into the various variables
            setNumber(parsedStrings[1]);
            setOwnerName(parsedStrings[2]);
            setDateOpenedInMillis(Long.parseLong(parsedStrings[3]));
            setBalance(Double.parseDouble(parsedStrings[4]));
            setMinBalance(Double.parseDouble(parsedStrings[5]));
            setInterestRate(Double.parseDouble(parsedStrings[6]));
        } catch (NumberFormatException | NullPointerException e){
            //If the numbers weren't right, it's an argument problem
            throw new IllegalArgumentException();
        }
    }

    /*******************************************************************
	 * Gets the minimum required balance for this account
	 * @return the minimum required balance
	 ******************************************************************/
	public double getMinBalance() {
		return minBalance;
	}
	
	/*******************************************************************
     * Gets the interest rate for this account
	 * @return the interest rate for this account
	 ******************************************************************/
	public double getInterestRate() {
		return interestRate;
	}
	
	/*******************************************************************
     * Gets the serial version UID for file identification purposes
	 * @return the serialVersionuid for this class
	 ******************************************************************/
	public static long getSerialversionuid() {
        return serialVersionUID;
	}
	
	/*******************************************************************
     * Sets the minimum balance for this account. Doesn't check if
     * minBalance > balance. You must handle this yourself
	 * @param minBalance the new minimum balance to set
	 ******************************************************************/
	public void setMinBalance(double minBalance) {
        if (minBalance < 0)
            throw new IllegalArgumentException();
		this.minBalance = minBalance;
	}
	
	/*******************************************************************
     * Sets the interest rate for this account
	 * @param interestRate the new interest rate to set
	 ******************************************************************/
	public void setInterestRate(double interestRate) {
        if (interestRate < 0)
            throw new IllegalArgumentException();
		this.interestRate = interestRate;
	}


    /*******************************************************************
     * Sets the balance of the account if balance >= this.minBalance
     * @param balance The new balance of the account
     * @throws IllegalArgumentException if balance < this.minBalance
     ******************************************************************/
    @Override
    public void setBalance(double balance){
        if (balance >= this.minBalance){
            super.setBalance(balance);
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*******************************************************************
    * Returns a unique identifying name for the account class
    * @return A human readable unique class name
    ******************************************************************/
    public String getClassIdentifier(){
        return classIdentifier;
    }

    /*******************************************************************
     * Creates an array of the names of the data stored in the account.
     * Adds unique fields from this class to the abstract fields
     * @return The array of data headers
     ******************************************************************/
    public HeaderName[] getDataHeaders() {
        int size = Account.defaultDataHeaders.length +
                uniqueHeaders.length;

        //Join the two arrays:
        // uniqueHeaders and Account.defaultDataHeaders
        HeaderName[] array = new HeaderName[size];
        for (int i = 0; i < size; i++){
            if (i < Account.defaultDataHeaders.length){
                array[i] = Account.defaultDataHeaders[i];
            } else {
                array[i] = uniqueHeaders[i - Account.defaultDataHeaders.length];
            }
        }
        return array;
    }

    /*******************************************************************
     * Gets a comparator based on the name of the header
     * @param header The header to look up
     * @param ascending If true, the comparator will sort ascending
     * @return The appropriate comparator or null if none is found
     ******************************************************************/
    @Override
    public Comparator<Account> getComparatorFromHeader(
            HeaderName header, boolean ascending){
        Comparator<Account> base = getBaseComparator(header, ascending);

        if (base != null)
            return base;

        //Gets multiplied at each compareTo so that
        // we can reverse the sort if specified
        int reverse;
        if (ascending){
            reverse = 1;
        } else {
            reverse = -1;
        }

        //Uses lambda expressions to simplify the syntax
        if (    header.equals(uniqueHeaders[0]) ||
                header.equals(uniqueHeaders[1])){

            return (Account a1, Account a2) -> {
                if (a1 instanceof SavingsAccount &&
                    a2 instanceof SavingsAccount){

                    //They're both savings accounts
                    SavingsAccount s1 = (SavingsAccount) a1;
                    SavingsAccount s2 = (SavingsAccount) a2;

                    if (header.equals(uniqueHeaders[0])) {
                        return reverse * Double.compare(s1.getMinBalance(),
                                s2.getMinBalance());
                    } else {
                        return reverse * Double.compare(s1.getInterestRate(),
                                s2.getInterestRate());
                    }
                }

                if (!(a1 instanceof SavingsAccount) &&
                        !(a2 instanceof SavingsAccount)){
                    //They're both not savings accounts.
                    //According to this comparator, they're equal
                    return 0;
                }

                //The only cases left are one of each
                if (a1 instanceof SavingsAccount){
                    //a1 is the savings account
                    return reverse * -1;
                } else {
                    //a2 is the savings account
                    return reverse * 1;
                }
            };
        }

        //We didn't find it
        return null;
    }

    /*******************************************************************
     * Generates a HashMap with the data headers as keys
     * @return The generated hashmap
     ******************************************************************/
    public HashMap<HeaderName, String> getClassDataAndHeaders(){
        HashMap<HeaderName, String> map = super.getBaseHashMap();
        map.put(uniqueHeaders[0], Double.toString(getMinBalance()));
        map.put(uniqueHeaders[1], Double.toString(getInterestRate()));
        return map;
    }


    /*******************************************************************
     * Generates a string representation of this account
     * @return A string in the format:
     *    "ID:NUMBER;NAME;DATE_OPENED;BALANCE;MIN_BALANCE;INTEREST_RATE"
     ******************************************************************/
    @Override
    public String toString(){
        //Hidden toString calls here
        return  classIdentifier + toStringSeparator
                + getNumber() + toStringSeparator
                + getOwnerName() + toStringSeparator
                + getDateOpenedInMillis() + toStringSeparator
                + getBalance() + toStringSeparator
                + getMinBalance() + toStringSeparator
                + getInterestRate();
    }

    /*******************************************************************
     * Generates a DOM element that represents this account
     * @return A DOM element that represents the account
     ******************************************************************/
    @Override
    public Element getDOMNode(Document dom){
        Element root = dom.createElement(classIdentifier);

        Element accNumber = dom.createElement("AccountNumber");
        accNumber.appendChild(dom.createTextNode(getNumber()));
        root.appendChild(accNumber);

        Element ownName = dom.createElement("OwnerName");
        ownName.appendChild(dom.createTextNode(getOwnerName()));
        root.appendChild(ownName);

        Element date = dom.createElement("DateOpened");
        date.appendChild(dom.createTextNode(Long.toString(
                        getDateOpenedInMillis()))
        );
        root.appendChild(date);

        Element balance = dom.createElement("Balance");
        balance.appendChild(dom.createTextNode(Double.toString(
                getBalance()
        )));
        root.appendChild(balance);

        Element minBalance = dom.createElement("MinimumBalance");
        minBalance.appendChild(dom.createTextNode(Double.toString(
                getMinBalance()
        )));
        root.appendChild(minBalance);

        Element interestRate = dom.createElement("InterestRate");
        interestRate.appendChild(dom.createTextNode(Double.toString(
                getInterestRate()
        )));
        root.appendChild(interestRate);

        return root;
    }

    /*******************************************************************
     * Parses an account from a DOM element and sets instance variables
     * @param root The element to parse from
     ******************************************************************/
    @Override
    public void parseFromDOMElement(Element root) {
        NodeList accNums = root.getElementsByTagName("AccountNumber");
        if (accNums.item(0).getFirstChild() != null) {
            setNumber(accNums.item(0).getFirstChild().getTextContent());
        } else {
            setNumber("");
        }

        NodeList ownNames = root.getElementsByTagName("OwnerName");
        if (ownNames.item(0).getFirstChild() != null){
            setOwnerName(ownNames.item(0).getFirstChild().getTextContent());
        } else {
            setOwnerName("");
        }


        NodeList dateOpeneds = root.getElementsByTagName("DateOpened");
        setDateOpenedInMillis(Long.parseLong(
                        dateOpeneds.item(0).getFirstChild().getTextContent())
        );

        NodeList bals = root.getElementsByTagName("Balance");
        setBalance(Double.parseDouble(
                        bals.item(0).getFirstChild().getTextContent())
        );

        NodeList minBals = root.getElementsByTagName("MinimumBalance");
        setMinBalance(Double.parseDouble(
                minBals.item(0).getFirstChild().getTextContent())
        );

        NodeList intRates = root.getElementsByTagName("InterestRate");
        setInterestRate(Double.parseDouble(
                intRates.item(0).getFirstChild().getTextContent())
        );

    }
}